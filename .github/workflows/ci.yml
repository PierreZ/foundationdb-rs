name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:

jobs:
  simulation:
    name: "Simulation framework"
    runs-on: ubuntu-latest
    container:
      image: foundationdb/build:centos7-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run ls and pwd
        run: ls && pwd

  compatibility:
    name: "Compat ${{ matrix.os }}/${{ matrix.toolchain }}/${{ matrix.fdb_feature_version }}"

    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        toolchain: ["1.63.0", "stable"]
        fdb_feature_version: ["fdb-7_1", "fdb-7_0", "fdb-6_3", "fdb-6_2", "fdb-6_1"]

    runs-on: ${{ matrix.os }}

    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup FoundationDB
        uses: foundationdb-rs/foundationdb-actions-install@v2.1.0
        with:
          version: "7.1.37"

      - name: Enable tenant
        run: fdbcli --exec "configure single memory tenant_mode=optional_experimental"

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          profile: minimal
          default: true

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose -p foundationdb --no-default-features --features ${{ matrix.fdb_feature_version }}

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          # Examples needs to have uuid enabled
          args: --verbose -p foundationdb --no-default-features --features ${{ matrix.fdb_feature_version }},uuid


  test:
    name: "Test foundationDB with ${{ matrix.toolchain }}"
    strategy:
      matrix:
        toolchain: ["1.63.0", "stable", "beta", "nightly"]

    runs-on: "ubuntu-latest"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install FoundationDB
        uses: foundationdb-rs/foundationdb-actions-install@v2.1.0
        with:
          version: "7.1.37"

      - name: Enable tenant
        run: fdbcli --exec "configure single memory tenant_mode=optional_experimental"

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: "${{ matrix.toolchain }}"
          components: rustfmt, clippy

      - name: Run all tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p foundationdb --features num-bigint,embedded-fdb-include,tenant-experimental

  lint:
    name: Rustfmt / Clippy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install FoundationDB
        uses: foundationdb-rs/foundationdb-actions-install@v2.1.0
        with:
          version: "7.1.37"

      - name: Enable tenant
        run: fdbcli --exec "configure single memory tenant_mode=optional_experimental"

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest

    env:
      CARGO_INCREMENTAL: "0"
      RUST_BACKTRACE: 1
      RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"

    steps:
      - uses: actions/checkout@v3

      - name: Install FoundationDB
        uses: foundationdb-rs/foundationdb-actions-install@v2.1.0
        with:
          version: "7.1.37"

      - name: Enable tenant
        run: fdbcli --exec "configure single memory tenant_mode=optional_experimental"

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Build bindingtester
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p bindingtester --target x86_64-unknown-linux-gnu

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          # doc tests are disabled fow now as they do not compile with -Cpanic=abort
          args: --tests -p foundationdb --no-fail-fast --target x86_64-unknown-linux-gnu

      - name: Setup bindingtester
        run: scripts/setup_bindingtester.sh target/x86_64-unknown-linux-gnu/debug/bindingtester

      - name: Run bindingtester
        run: scripts/run_bindingtester.sh 50

      - id: coverage
        uses: actions-rs/grcov@v0.1

      - name: Coveralls upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}

      - name: Codecov upload
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ steps.coverage.outputs.report }}
